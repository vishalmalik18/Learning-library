import tensorflow as tf
import time

tf.__version__

class FileDataset(tf.data.Dataset):
    def read_file_in_batches(num_samples):
        # open file
        time.sleep(0.3)
        for sample_idx in range(num_samples):
            time.sleep(0.015)
            yield(sample_idx,)
            
    def __new__(cls,num_samples=3):
        return tf.data.Dataset.from_generator(
            cls.read_file_in_batches,output_signature=tf.TensorSpec(shape=(1,),dtype=tf.int64),
            args=(num_samples,)
        )


def benchmark(dataset,num_epochs=2):
    for epoch_num in range(num_epochs):
        for sample in dataset:
            time.sleep(0.01)


%%timeit
benchmark(FileDataset())


%%timeit
benchmark(FileDataset().prefetch(2))

%%timeit
benchmark(FileDataset().prefetch(tf.data.AUTOTUNE))


dataset = tf.data.Dataset.range(5)
for d in dataset:
    print(d.numpy())


dataset = dataset.map(lambda x:x**2)
for d in dataset:
    print(d.numpy())


dataset = dataset.cache()

list(dataset.as_numpy_iterator())

for d in dataset:
    print(d.numpy())


def mapped_function(s):
    tf.py_function(lambda:time.sleep(0.03),[],())
    return s


%%timeit -n1 -r1

benchmark(FileDataset().map(mapped_function),5)



%%timeit -n1 -r1

benchmark(FileDataset().map(mapped_function),5)